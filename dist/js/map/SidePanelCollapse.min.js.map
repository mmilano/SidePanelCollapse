{"version":3,"sources":["SidePanelCollapse.js"],"names":["window","SidePanelCollapse","define","amd","module","exports","self","this","_proto","prototype","styles","getComputedStyle","document","querySelector","defaults","sidepanelElement","sidepanelCloseElement","durationShow","getPropertyValue","durationHide","durationHideFast","sidePanelIsOpenClass","backdrop","backdropStyleClass","handleLinks","linkHandle","e","destination","preventDefault","closeType","$sidepanel","one","target","href","location","close","Backdrop","_sidepanel","style","el","element","settings","createElement","className","body","appendChild","options","_settings","Object","assign","durationShowIsCustom","undefined","_$sidepanel","$","length","console","error","warn","open","bind","handleKey","setProperty","on","sidepanelCloseButton","addEventListener","sidepanelLinks","getElementsByTagName","ln","i","initOnData","SidePanel","querySelectorAll","forEach","push","id","isCollapsing","classList","contains","keyCode","show","collapse","hide","add","closeQueued","_duration","transitionDuration","removeEventListener","remove","once","passive","readyState"],"mappings":"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","file":"../SidePanelCollapse.min.js","sourcesContent":["/*! **********\n * SidePanelCollapse v1.0\n * A Bootstrap 4-based sidebar augmenting the \"collapse\" component to collapse horizontally,\n * and allow variable duration timings for the transitions\n *\n * Michel Milano\n * MIT License\n */\n\n/* jshint latedef: nofunc */\n/* globals define, self, SidePanel */\n\n// UMD template\n(function(window, SidePanelCollapse) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD\n        define([], SidePanelCollapse);\n    } else if (typeof module === \"object\" && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports, like Node.\n        module.exports = SidePanelCollapse();\n    } else {\n        // Browser global (root is window)\n        window.SidePanelCollapse = SidePanelCollapse();\n    }\n} (typeof self !== \"undefined\" ? self : this, function() {\n    \"use strict\";\n\n    var _proto = SidePanelCollapse.prototype;  // convenience shorthand\n\n    var data_selector = \"[data-sidepanel-collapse]\";  // selector for creation via data attribute\n\n    // make one single set of settings from defaults and any options passed in on construction\n    function defineSettings(defaults, options) {\n\n        // start with the defaults\n        let _settings = Object.assign({}, defaults);\n\n        // reconcile with any provided options that will supercede/overwrite defaults\n        Object.assign(_settings, options);\n\n        // if backdrop is anything other than \"true\", it is false\n        _settings.backdrop = (_settings.backdrop === true) ? true : false;\n\n        // create a flag for the durationShow setting because it is a special case.\n        // see SidePanelCollapse constructor.\n        _settings.durationShowIsCustom = (options !== undefined && options.durationShow !== undefined) ? true : false;\n\n        return _settings;\n    }\n\n    // default values\n    // includes the access of the css variable values as module is instantiated\n    let styles = getComputedStyle(document.querySelector(\".sidepanel\"));\n    var defaults = {\n\n        // css selectors:\n        // default selectors for the sidepanel DOM elements\n        sidepanelElement: \"#sidePanel\",  // top-level of the sidepanel\n        sidepanelCloseElement: \".sidePanel-close\",  // the close button, containing the close icon, visible when the sidepanel is displayed\n\n        // extract and update the css transition values:\n        // doing this so that the duration values do not have to be repeated in the javascript,\n        // and there is only one declaration (e.g. if the defaults are changed).\n        // if these are defined as .js values instead, the durations need to be in seconds (css transition format)\n        //\n        // css transition-durations:\n        // default values for the sidepanel transition timings are in css transition-duration format. e.g.:\n        //     durationShow: \"1.65s\",  // leisurely opening\n        durationShow: styles.getPropertyValue(\"--durationShow\"),\n        durationHide: styles.getPropertyValue(\"--durationHide\"),\n        durationHideFast: styles.getPropertyValue(\"--durationHideFast\"),\n\n        // HTML class attribute:\n        // class that is added to the document's <body> element when sidepanel shows, removed when it hides.\n        // this is a convenience - for use in enabling any specific styles that should apply when sidepanel is open.\n        sidePanelIsOpenClass: \"sidepanel-open\",\n\n        // boolean:\n        // whether or not a backdrop, or overlay, should display behind the sidepanel\n        backdrop: true,\n\n        // HTML class attribute:\n        // which color style of backdrop to use: \"dark\", or \"light\".\n        // corresponds to the css styles (e.g. \"light\" -> \".light\")\n        backdropStyleClass: \"light\",\n\n        // boolean:\n        // whether sidepanel should enable special behavior for <a> links in the sidepanel.\n        // currently, the behavior is to intercept the link click, close the sidepanel using the HideFast duration, and then follow the link\n        handleLinks: true,\n    };\n\n    // link callback:\n    // when a link is clicked,\n    // close the panel - fast mode.\n    // then, when panel is closed, go to destination of link.\n    function linkHandle() {\n\n        function linkEvent(destination) {\n            return function(e) {\n                // ...if anything needs to be done with e here...\n                window.location = destination;\n            };\n        }\n\n        // return function with closure. used for the link eventListener\n        return function(e) {\n            e.preventDefault();\n            this.closeType = \"fast\";\n            // create link event handler with closure\n            this.$sidepanel.one(\"hidden.bs.collapse\", linkEvent(e.target.href));\n            this.close();\n        };\n    }\n\n    // determine if the sidepanel is currently transitioning or not\n    // '.collapsing' is applied to the element by Bootstrap during the transition, removed when finished\n    _proto.isCollapsing = function() {\n        return this.$sidepanel[0].classList.contains(\"collapsing\");\n    };\n\n    // key press handler\n    // when the sidenav is displayed (open), ESC will close.\n    // expects: invoked as event callback, with .bind(the main sidepanel object) (i.e. .bind(this))\n    // (which is done as the default in constructor)\n    _proto.handleKey = function(e) {\n        let key = e.keyCode;\n\n        switch(key) {\n            case 27: // 'esc'\n                this.close(e);\n                break;\n        }\n    };\n\n    // manually activate the 'show' action\n    _proto.show = function() {\n        this.$sidepanel.collapse(\"show\");  // invoke Bootstrap action in jquery land\n    };\n\n    // manually activate the 'hide' action\n    _proto.hide = function() {\n        this.$sidepanel.collapse(\"hide\");  // invoke Bootstrap action in jquery land\n    };\n\n    // OPEN the sidepanel\n    // expects to be called with this = the sidepanel object (e.g. via .bind(this))\n    // (which is done as the default in constructor)\n    _proto.open = function(e) {\n\n        // return a function as the event handler\n        // of things to do when when the sidebar opening is completed.\n        // presumes: event is on the sidepanel DOM element itself.\n        function whenTransitionEnds(_this) {\n            var handler = function() {};\n            //var handler = function(e) {\n                // no action currently\n            //};\n            return handler;\n        }\n\n        // if open is invoked via default bootstrap behavior, then .collapse(\"show\") will have been invoked by bootstrap already,\n        // and event will exist (e.g. click).\n        // if called programmatically, e will not exist, and \"show\" will need to be called manually.\n        // dev todo: there might be a better way to do this\n        if (e === undefined) {\n            this.show();\n        }\n\n        // initiate the showing of backdrop if truthy\n        if (this.backdrop) {\n            this.backdrop.show(this.$sidepanel);\n        }\n\n        // set keyup event handler - to catch ESC key and close sidepanel if pressed\n        document.addEventListener(\"keyup\", this.handleKey);\n\n        // jquery event listener to run ONCE on the Bootstrap \"is shown\" event\n        this.$sidepanel.one(\"shown.bs.collapse\", whenTransitionEnds(this));\n\n        // add a class to the document's <body>.\n        // for potential use to enable any styles to apply only when sidepanel is open\n        document.body.classList.add(this.settings.sidePanelIsOpenClass);\n    };\n\n    // CLOSE the sidepanel\n    // usually invoked as event callback\n    // expects to be called with this = the sidepanel object (e.g. via .bind(this))\n    // (which is done as the default in constructor)\n    _proto.close = function(e) {\n\n        // event handler:\n        // when hiding/closing is complete, remove the transition duration override so that\n        // the fallback, css-defined duration, will apply when the sidebar is shown/opened again.\n        // presumes event is on the sidenav DOM element itself.\n        function whenTransitionEnds(e) {\n            e.target.style.transitionDuration = null;\n        }\n\n        // check to see if collapsing is in progress.\n        // if so, interrupt the normal close process, reroute via event, and exit early,\n        // so that when the transition is finished, it will then go and immediately start to close\n        if (this.isCollapsing() && !this.closeQueued) {\n            // not already queued, so queue up to close immediately when transition has finished, and return out.\n            this.closeQueued = true;\n            this.closeType = \"fast\";\n            this.$sidepanel.one(\"shown.bs.collapse\", this.close);\n            return;\n        } else if (this.isCollapsing() && this.closeQueued) {\n            // already queued. return early.\n            return;\n        }\n\n        // start: proceed with closing actions\n\n        // reset queued up flag\n        // dev todo: find a less public way of managing this flag\n        this.closeQueued = false;\n\n        // if open is invoked via event (e.g. click the button), then event will exist.\n        // if called independently, event will not exist.\n        if (e !== undefined) {\n            e.preventDefault();\n        }\n\n        // set a jquery event listener to run ONCE on the Bootstrap \"is hidden\" event,\n        this.$sidepanel.one(\"hidden.bs.collapse\", whenTransitionEnds);\n\n        // manually set the duration so that closing transition uses a custom duration.\n        // this is overriding the default behavior, where duration is set by the css .collapsing class rule, and the same\n        // duration is used for both opening and closing.\n        let _duration;\n        switch(this.closeType) {\n            // case \"page\":\n                // dev todo: future expansion\n                /* falls through */\n            case \"fast\":\n                _duration = this.settings.durationHideFast;\n                this.closeType = \"normal\";  // reset\n                break;\n            default:\n                // = \"normal\"\n                _duration = this.settings.durationHide;\n        }\n        // access native DOM element within jquery object\n        this.$sidepanel[0].style.transitionDuration = _duration;\n\n        // initiate the hiding\n        this.hide();\n\n        // initiate the hiding of backdrop if truthy\n        if (this.backdrop) {\n            this.backdrop.hide();\n        }\n\n        // cleanup\n        document.removeEventListener(\"keyup\", this.handleKey);\n        document.body.classList.remove(this.settings.sidePanelIsOpenClass);\n    };\n\n    // future home of method to dispose of all the sidepanel.\n    // dev note: currently disabled. to be developed.\n    //     _proto.dispose = function() {\n    //         for (var prop in this) {\n    //             this[prop] = null;\n    //         }\n    //     };\n\n\n    // *****\n    // Backdrop\n    // the backdrop/overlay that is displayed when the sidepanel is open\n\n    // show the backdrop\n    // 'this' will be = Backdrop\n    Backdrop.prototype.show = function() {\n        this.element.classList.add(\"show\", \"fadein\");\n    };\n\n    // hide the backdrop\n    // 'this' will be = Backdrop\n    Backdrop.prototype.hide = function() {\n\n        // method to run when fadeout animation ends - cleans up, and hides the backdrop.\n        // because event is on backdrop, event.target is the backdrop - uses backdrop from there for simplicity\n        function whenAnimationEnds(e) {\n            e.target.classList.remove(\"show\");\n            // note: if eventlistener {once: true} is not available (browser support), then eventListener should be removed manually, e.g.:\n            // _backdrop.removeEventListener(\"animationend\", whenAnimationEnds, true);\n        }\n\n        // when the backdrop's animationend event fires, call method. only once, since the listener is added again when it displays again.\n        this.element.addEventListener(\"animationend\", whenAnimationEnds, {once: true, passive: true});\n        // remove \".fadein\" to activate the default animation (fadeout)\n        this.element.classList.remove(\"fadein\");\n    };\n\n    // Backdrop constructor\n    // @param: provide backdrop with access to the parent sidepanel object that is created...\n    function Backdrop(_sidepanel) {\n\n        // create the backdrop HTML element\n        function create(style) {\n            let el = document.createElement(\"div\");\n            el.className = \"backdrop\" + \" \" + style;\n            return el;\n        }\n\n        // insert the element into the document DOM (at bottom)\n        function insert(el) {\n            document.body.appendChild(el);\n        }\n\n        // construction\n        // create the backdrop DOM element and store it\n        this.element = create(_sidepanel.settings.backdropStyleClass);\n\n        // add backdrop to the page DOM\n        insert(this.element);\n    };\n\n    // end Backdrop\n    // *****\n\n    // SidePanel constructor\n    function SidePanelCollapse(options) {\n\n        let _settings = this.settings = defineSettings(defaults, options);\n\n        // (try to) select and store the main sidepanel element as jquery object\n        let _$sidepanel = this.$sidepanel = $(_settings.sidepanelElement);\n\n        // check if sidepanel exists on the page;\n        // if not, exit early.\n        // check length because this is a jquery object.\n        if (!this.$sidepanel.length) {\n            // no sidepanel :(\n            this.$sidepanel = false;\n            console.error(\"No SidePanel element could be found with the selector \\\"\"+ _settings.sidepanelElement + \"\\\".\");\n            console.warn(\"SidePanel was not created.\");\n            return false;\n        }\n\n        // sidepanel exists!\n        //\n        // begin: sidepanel initialization\n\n        // the open and close methods will be called as event listeners, and all of them need to access the correct 'this,'\n        // which is troublesome with event listeners.\n        // so, pre-bind them all up for convenience and sanity as the default\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.handleKey = this.handleKey.bind(this);\n\n        // durationShow is a special case, because it is the one duration value that is set initially in the css.\n        // so if the configuration (options) have a custom value, then the css variable needs to be updated\n        if (_settings.durationShowIsCustom) {\n            this.$sidepanel[0].style.setProperty(\"--durationShow\", _settings.durationShow);\n        }\n\n        // add event listener for Bootstrap collapse \"show\" event\n        // - docs: https://getbootstrap.com/docs/4.3/components/collapse/#events\n        // - show.bs.collapse: This event fires immediately when the show instance method is called.\n        // uses jquery event (and not regular javascript) because Bootstrap uses jquery-land events.\n        this.$sidepanel.on(\"show.bs.collapse\", this.open);\n\n        // (try to) select and cache the close button element.\n        // note: assumes there is only one .sidepanel and only one close button within the sidepanel structure\n        this.sidepanelCloseButton = _settings.sidepanelCloseElement ? _$sidepanel[0].querySelector(_settings.sidepanelCloseElement) : false;\n        if (this.sidepanelCloseButton) {\n            // add persistent event listener for action on the close element\n            this.sidepanelCloseButton.addEventListener(\"click\", this.close, false);\n        } else {\n            // no close button found :(\n            // the sidepanel will be initialized, but maybe this isn't what is desired?\n            console.warn(\"SidePanel: no close button could be found with the selector \\\"\"+ _settings.sidepanelCloseElement + \"\\\".\");\n        }\n\n        // if enabled, create the backdrop element and add event listener\n        if (_settings.backdrop) {\n            this.backdrop = new Backdrop(this);\n            this.backdrop.element.addEventListener(\"click\", this.close, true);\n        } else {\n            this.backdrop = null;\n        }\n\n        // flag for which close type, and therefore duration, to use: normal, or fast\n        // dev todo: closeType could be kept private\n        this.closeType = \"normal\";  // default behavior when closing the sidepanel\n\n        // handle links:\n        // find all the links in the sidepanel and add an event on them\n        // in order to trap the links and implement custom behavior\n        if (_settings.handleLinks) {\n            let sidepanelLinks = this.$sidepanel[0].getElementsByTagName(\"a\"), ln = sidepanelLinks.length;\n            for (var i = 0; i < ln; i++) {\n                sidepanelLinks[i].addEventListener(\"click\", linkHandle().bind(this));\n            };\n        }\n\n        // end: sidepanel initialization\n    };\n\n    // initialize any elements 'automatically' based on existence of the data_selector attribute on an element.\n    // will create a page global \"SidePanel\" containing the instance(s) of the SidePanelCollapse object.\n    // presumes just one, which will be SidePanel[0], but who knows - maybe there can be multiple in the future.\n    function initOnData() {\n        window.SidePanel = [];\n        let list = document.querySelectorAll(data_selector);\n        list.forEach(function(element) {\n            SidePanel.push(new SidePanelCollapse(element.id));\n        });\n    }\n\n    if (document.readyState === \"loading\") {  // loading hasn't finished yet\n        document.addEventListener(\"DOMContentLoaded\", initOnData);\n    } else {  // already fired\n        initOnData();\n    }\n\n    return SidePanelCollapse;\n}));"]}