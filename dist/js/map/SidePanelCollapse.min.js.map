{"version":3,"sources":["SidePanelCollapse.js"],"names":["window","SidePanelCollapse","define","amd","module","exports","self","this","_proto","prototype","el","document","querySelector","styles","getComputedStyle","defaults","sidepanelElement","sidepanelCloseElement","durationShow","getPropertyValue","durationHide","durationHideFast","sidePanelIsOpenClass","backdrop","backdropStyleClass","handleLinks","linkHandle","e","destination","preventDefault","closeType","$sidepanel","one","target","href","location","close","Backdrop","_sidepanel","style","element","settings","createElement","className","body","appendChild","options","_settings","Object","assign","durationShowIsCustom","undefined","_$sidepanel","$","length","console","error","warn","open","bind","handleKey","setProperty","on","sidepanelCloseButton","addEventListener","sidepanelLinks","getElementsByTagName","ln","i","initOnData","SidePanel","querySelectorAll","forEach","push","id","isCollapsing","classList","contains","keyCode","show","collapse","hide","add","_duration","closeQueued","transitionDuration","removeEventListener","remove","once","passive","readyState"],"mappings":"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","file":"../SidePanelCollapse.min.js","sourcesContent":["/*! **********\n * SidePanelCollapse v1.2.0\n * A Bootstrap 4-based sidebar augmenting the \"collapse\" component to collapse horizontally,\n * and allow variable duration timings for the transitions\n *\n * Michel Milano\n * MIT License\n */\n\n/* jshint latedef: nofunc */\n/* globals define, self, SidePanel */\n\n// UMD template\n(function(window, SidePanelCollapse) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD\n        define([], SidePanelCollapse);\n    } else if (typeof module === \"object\" && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports, like Node.\n        module.exports = SidePanelCollapse();\n    } else {\n        // Browser global (root is window)\n        window.SidePanelCollapse = SidePanelCollapse();\n    }\n} (typeof self !== \"undefined\" ? self : this, function() {\n    \"use strict\";\n\n    const _proto = SidePanelCollapse.prototype; // convenience shorthand\n\n    /**\n     * default selector for creation via data attribute\n     * @const\n     */\n    const data_selector = \"[data-sidepanel-collapse]\";\n\n    /**\n     * make one single set of settings from defaults and any options passed in on construction\n     * @param {Object} defaults defaults settings\n     * @param {*} options custom settings\n     * @returns {Object} settings\n     */\n    function defineSettings(defaults, options) {\n        // start with the defaults\n        let _settings = Object.assign({}, defaults);\n\n        // reconcile with any provided options that will supercede/overwrite defaults\n        Object.assign(_settings, options);\n\n        // if backdrop is anything other than \"true\", it is false\n        _settings.backdrop = _settings.backdrop === true ? true : false;\n\n        // create a flag for the durationShow setting because it is a special case.\n        // see SidePanelCollapse constructor.\n        _settings.durationShowIsCustom = options !== undefined && options.durationShow !== undefined ? true : false;\n\n        return _settings;\n    }\n\n    // default values\n    // includes the access of the css variable values as module is instantiated\n\n    // check if there is no sidePanel in the page so that error is not thrown\n    const el = document.querySelector(\".sidepanel\");\n    const styles = el ? getComputedStyle(el) : \"\";\n\n    /**\n     * siepanel default settings\n     * @const\n     */\n    const defaults = {\n        // css selectors:\n        // default selectors for the sidepanel DOM elements\n        sidepanelElement: \"#sidePanel\", // top-level of the sidepanel\n        sidepanelCloseElement: \".sidePanel-close\", // the close button, containing the close icon, visible when the sidepanel is displayed\n\n        // extract and update the css transition values:\n        // doing this so that the duration values do not have to be repeated in the javascript,\n        // and there is only one declaration (e.g. if the defaults are changed).\n        // if these are defined as .js values instead, the durations need to be in seconds (css transition format)\n        //\n        // css transition-durations:\n        // default values for the sidepanel transition timings are in css transition-duration format. e.g.:\n        //     durationShow: \"1.65s\",  // leisurely opening\n        durationShow: styles.getPropertyValue(\"--durationShow\"),\n        durationHide: styles.getPropertyValue(\"--durationHide\"),\n        durationHideFast: styles.getPropertyValue(\"--durationHideFast\"),\n\n        // HTML class attribute:\n        // class that is added to the document's <body> element when sidepanel shows, removed when it hides.\n        // this is a convenience - for use in enabling any specific styles that should apply when sidepanel is open.\n        sidePanelIsOpenClass: \"sidepanel-open\",\n\n        // boolean:\n        // whether or not a backdrop, or overlay, should display behind the sidepanel\n        backdrop: true,\n\n        // HTML class attribute:\n        // which color style of backdrop to use: \"dark\", or \"light\".\n        // corresponds to the css styles (e.g. \"light\" -> \".light\")\n        backdropStyleClass: \"light\",\n\n        // boolean:\n        // whether sidepanel should enable special behavior for <a> links in the sidepanel.\n        // currently, the behavior is to intercept the link click, close the sidepanel using the HideFast duration, and then follow the link\n        handleLinks: true,\n    };\n\n    /**\n     * link callback:\n     * when a link is clicked,\n     * close the panel - fast mode.\n     * then, when panel is closed, go to destination of link.\n     * @returns {Function} event handler\n     */\n    function linkHandle() {\n        function linkEvent(destination) {\n            return function (e) {\n                // ...if anything needs to be done with e here...\n                window.location = destination;\n            };\n        }\n\n        // return function. used for the link eventListener\n        return function (e) {\n            e.preventDefault();\n            this.closeType = \"fast\";\n            // create link event handler with closure\n            this.$sidepanel.one(\"hidden.bs.collapse\", linkEvent(e.target.href));\n            this.close();\n        };\n    }\n\n    // determine if the sidepanel is currently transitioning or not\n    // '.collapsing' is applied to the element by Bootstrap during the transition, removed when finished\n    _proto.isCollapsing = function () {\n        return this.$sidepanel[0].classList.contains(\"collapsing\");\n    };\n\n    // key press handler\n    // when the sidenav is displayed (open), ESC will close.\n    // expects: invoked as event callback, with .bind(the main sidepanel object) (i.e. .bind(this))\n    // (which is done as the default in constructor)\n    _proto.handleKey = function (e) {\n        let key = e.keyCode;\n\n        switch (key) {\n            case 27: // 'esc'\n                this.close(e);\n                break;\n        }\n    };\n\n    // manually activate the 'show' action\n    _proto.show = function () {\n        this.$sidepanel.collapse(\"show\"); // invoke Bootstrap action in jquery land\n    };\n\n    // manually activate the 'hide' action\n    _proto.hide = function () {\n        this.$sidepanel.collapse(\"hide\"); // invoke Bootstrap action in jquery land\n    };\n\n    // OPEN the sidepanel\n    // expects to be called with this = the sidepanel object (e.g. via .bind(this))\n    // (which is done as the default in constructor)\n    _proto.open = function (e) {\n        // return a function as the event handler\n        // of things to do when when the sidebar opening is completed.\n        // presumes: event is on the sidepanel DOM element itself.\n        function whenTransitionEnds(_this) {\n            var handler = function () {};\n            //var handler = function(e) {\n            // no action currently\n            //};\n            return handler;\n        }\n\n        // if open is invoked via default bootstrap behavior, then .collapse(\"show\") will have been invoked by bootstrap already,\n        // and event will exist (e.g. click).\n        // if called programmatically, e will not exist, and \"show\" will need to be called manually.\n        // dev todo: there might be a better way to do this\n        if (e === undefined) {\n            this.show();\n        }\n\n        // initiate the showing of backdrop if truthy\n        if (this.backdrop) {\n            this.backdrop.show(this.$sidepanel);\n        }\n\n        // set keyup event handler - to catch ESC key and close sidepanel if pressed\n        document.addEventListener(\"keyup\", this.handleKey);\n\n        // jquery event listener to run ONCE on the Bootstrap \"is shown\" event\n        this.$sidepanel.one(\"shown.bs.collapse\", whenTransitionEnds(this));\n\n        // add a class to the document's <body>.\n        // for potential use to enable any styles to apply only when sidepanel is open\n        document.body.classList.add(this.settings.sidePanelIsOpenClass);\n    };\n\n    // CLOSE the sidepanel\n    // usually invoked as event callback\n    // expects to be called with this = the sidepanel object (e.g. via .bind(this))\n    // (which is done as the default in constructor)\n    _proto.close = function (e) {\n        // event handler:\n        // when hiding/closing is complete, remove the transition duration override so that\n        // the fallback, css-defined duration, will apply when the sidebar is shown/opened again.\n        // presumes event is on the sidenav DOM element itself.\n        const whenTransitionEnds = (e) => {\n            e.target.style.transitionDuration = null;\n        };\n\n        // check to see if collapsing is in progress.\n        // if so, interrupt the normal close process, reroute via event, and exit early,\n        // so that when the transition is finished, it will then go and immediately start to close\n        if (this.isCollapsing() && !this.closeQueued) {\n            // not already queued, so queue up to close immediately when transition has finished, and return out.\n            this.closeQueued = true;\n            this.closeType = \"fast\";\n            this.$sidepanel.one(\"shown.bs.collapse\", this.close);\n            return;\n        } else if (this.isCollapsing() && this.closeQueued) {\n            // already queued. return early.\n            return;\n        }\n\n        // start: proceed with closing actions\n\n        // reset queued up flag\n        // dev todo: find a less public way of managing this flag\n        this.closeQueued = false;\n\n        // if open is invoked via event (e.g. click the button), then event will exist.\n        // if called independently, event will not exist.\n        if (e !== undefined) {\n            e.preventDefault();\n        }\n\n        // set a jquery event listener to run ONCE on the Bootstrap \"is hidden\" event,\n        this.$sidepanel.one(\"hidden.bs.collapse\", whenTransitionEnds);\n\n        // manually set the duration so that closing transition uses a custom duration.\n        // this is overriding the default behavior, where duration is set by the css .collapsing class rule, and the same\n        // duration is used for both opening and closing.\n        let _duration;\n        switch (this.closeType) {\n            // case \"page\":\n            // dev todo: future expansion\n            /* falls through */\n            case \"fast\":\n                _duration = this.settings.durationHideFast;\n                this.closeType = \"normal\"; // reset\n                break;\n            default:\n                // = \"normal\"\n                _duration = this.settings.durationHide;\n        }\n        // access native DOM element within jquery object\n        this.$sidepanel[0].style.transitionDuration = _duration;\n\n        // initiate the hiding\n        this.hide();\n\n        // initiate the hiding of backdrop if truthy\n        if (this.backdrop) {\n            this.backdrop.hide();\n        }\n\n        // cleanup\n        document.removeEventListener(\"keyup\", this.handleKey);\n        document.body.classList.remove(this.settings.sidePanelIsOpenClass);\n    };\n\n    // future home of method to dispose of all the sidepanel.\n    // dev note: currently disabled. to be developed.\n    //     _proto.dispose = function() {\n    //         for (var prop in this) {\n    //             this[prop] = null;\n    //         }\n    //     };\n\n    // *****\n    // Backdrop\n    // = the backdrop/overlay that is displayed when the sidepanel is open\n\n    /**\n     * backdrop: show the backdrop\n     * 'this' will be = Backdrop\n     */\n    Backdrop.prototype.show = function () {\n        this.element.classList.add(\"show\", \"fadein\");\n    };\n\n    /**\n     * backdrop: hide the backdrop\n     * 'this' will be = Backdrop\n     */\n    Backdrop.prototype.hide = function () {\n        /**\n         * method to run when fadeout animation ends - cleans up, and hides the backdrop.\n         * because event is on backdrop, event.target is the backdrop - uses backdrop from there for simplicity\n         * @param {*} e event\n         */\n        const whenAnimationEnds = (e) => {\n            e.target.classList.remove(\"show\");\n            // note: if eventlistener {once: true} is not available (browser support), then eventListener should be removed manually, e.g.:\n            // _backdrop.removeEventListener(\"animationend\", whenAnimationEnds, true);\n        };\n\n        // when the backdrop's animationend event fires, call method. only once, since the listener is added again when it displays again.\n        this.element.addEventListener(\"animationend\", whenAnimationEnds, { once: true, passive: true });\n        // remove \".fadein\" to activate the default animation (fadeout)\n        this.element.classList.remove(\"fadein\");\n    };\n\n    // Backdrop constructor\n    // @param: provide backdrop with access to the parent sidepanel object that is created...\n    function Backdrop(_sidepanel) {\n        // create the backdrop HTML element\n        const create = (style) => {\n            let el = document.createElement(\"div\");\n            el.className = \"backdrop\" + \" \" + style;\n            return el;\n        };\n\n        // insert the element into the document DOM (at bottom)\n        const insert = (el) => {\n            document.body.appendChild(el);\n        };\n\n        // construction\n        // create the backdrop DOM element and store it\n        this.element = create(_sidepanel.settings.backdropStyleClass);\n\n        // add backdrop to the page DOM\n        insert(this.element);\n    }\n\n    // end Backdrop\n    // *****\n\n    /**\n     * SidePanel constructor\n     * @param {Object} options\n     * @returns\n     */\n    function SidePanelCollapse(options) {\n        const _settings = (this.settings = defineSettings(defaults, options));\n\n        // (try to) select and store the main sidepanel element as jquery object\n        const _$sidepanel = (this.$sidepanel = $(_settings.sidepanelElement));\n\n        // check if sidepanel exists on the page;\n        // if not, exit early.\n        // check length because this is a jquery object.\n        if (!this.$sidepanel.length) {\n            // no sidepanel :(\n            this.$sidepanel = false;\n            console.error('No SidePanel element could be found with the selector \"' + _settings.sidepanelElement + '\".');\n            console.warn(\"SidePanel was not created.\");\n            return false;\n        }\n\n        // sidepanel exists!\n        //\n        // begin: sidepanel initialization\n\n        // the open and close methods will be called as event listeners, and all of them need to access the correct 'this,'\n        // which is troublesome with event listeners.\n        // so, pre-bind them all up for convenience and sanity as the default\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.handleKey = this.handleKey.bind(this);\n\n        // durationShow is a special case, because it is the one duration value that is set initially in the css.\n        // so if the configuration (options) have a custom value, then the css variable needs to be updated\n        if (_settings.durationShowIsCustom) {\n            this.$sidepanel[0].style.setProperty(\"--durationShow\", _settings.durationShow);\n        }\n\n        // add event listener for Bootstrap collapse \"show\" event\n        // - docs: https://getbootstrap.com/docs/4.3/components/collapse/#events\n        // - show.bs.collapse: This event fires immediately when the show instance method is called.\n        // uses jquery event (and not regular javascript) because Bootstrap uses jquery-land events.\n        this.$sidepanel.on(\"show.bs.collapse\", this.open);\n\n        // (try to) select and cache the close button element.\n        // note: assumes there is only one .sidepanel and only one close button within the sidepanel structure\n        this.sidepanelCloseButton = _settings.sidepanelCloseElement ? _$sidepanel[0].querySelector(_settings.sidepanelCloseElement) : false;\n        if (this.sidepanelCloseButton) {\n            // add persistent event listener for action on the close element\n            this.sidepanelCloseButton.addEventListener(\"click\", this.close, false);\n        } else {\n            // no close button found :(\n            // the sidepanel will be initialized, but maybe this isn't what is desired?\n            console.warn('SidePanel: no close button could be found with the selector \"' + _settings.sidepanelCloseElement + '\".');\n        }\n\n        // if enabled, create the backdrop element and add event listener\n        if (_settings.backdrop) {\n            this.backdrop = new Backdrop(this);\n            this.backdrop.element.addEventListener(\"click\", this.close, true);\n        } else {\n            this.backdrop = null;\n        }\n\n        // flag for which close type, and therefore duration, to use: normal, or fast\n        // dev todo: closeType could be kept private\n        this.closeType = \"normal\"; // default behavior when closing the sidepanel\n\n        // handle links:\n        // find all the links in the sidepanel and add an event on them\n        // in order to trap the links and implement custom behavior\n        if (_settings.handleLinks) {\n            const sidepanelLinks = this.$sidepanel[0].getElementsByTagName(\"a\"),\n                ln = sidepanelLinks.length;\n            for (let i = 0; i < ln; i++) {\n                sidepanelLinks[i].addEventListener(\"click\", linkHandle().bind(this));\n            }\n        }\n\n        // end: sidepanel initialization\n    }\n\n    /**\n     * initialize any elements 'automatically' based on existence of the data_selector attribute on an element.\n     * will create a page global \"SidePanel\" containing the instance(s) of the SidePanelCollapse object.\n     */\n    function initOnData() {\n        window.SidePanel = [];\n        const list = document.querySelectorAll(data_selector);\n        list.forEach(function (element) {\n            SidePanel.push(new SidePanelCollapse(element.id));\n        });\n    }\n\n    if (document.readyState === \"loading\") {\n        // loading hasn't finished yet\n        document.addEventListener(\"DOMContentLoaded\", initOnData);\n    } else {\n        // already fired\n        initOnData();\n    }\n\n    return SidePanelCollapse;\n}));"]}